{"category":"HoverWheels","color":"#c58ce4","uiflow2":{"jscode":"const CUSTOM_HOVERWHEELS_LANGUAGES = {\n  \"CUSTOM_HOVERWHEELS_INIT\": {\n    \"en\": \"%1 init uart_num %2 tx %3 rx %4\"\n  },\n  \"CUSTOM_HOVERWHEELS_COMMAND\": {\n    \"en\": \"command %1 steer %2 speed %3\"\n  },\n  \"CUSTOM_HOVERWHEELS_QUERY\": {\n    \"en\": \"query %1\"\n  },\n  \"CUSTOM_HOVERWHEELS_CHANGED_SPEED\": {\n    \"en\": \"method %1 param0 %2\"\n  }\n};\n\nconst initType = 'custom_hoverwheels_init';\nBlockly.BlockRegExpList['custom_hoverwheels'] = {\n  regexp: new RegExp(/^custom_hoverwheels_/),\n  code: \"from HoverWheels import HoverWheels\",\n  initBlockType: initType,\n  categoryId: 'custom_hoverwheels',\n}\nBlockly.utils.registerLanguages(CUSTOM_HOVERWHEELS_LANGUAGES)\n\nBlockly.Msg.CUSTOM_HOVERWHEELS_HUE = '#c58ce4'\nBlockly.Msg.CUSTOM_HOVERWHEELS = 'HoverWheels'\n\nBlockly.utils.getcustom_hoverwheelsOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['hoverwheels_0', 'hoverwheels_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_hoverwheels_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HOVERWHEELS_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_hoverwheelsOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'hoverwheels_0'\n        },\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"uart_num\",\n          \"options\": [\n            [\"0\", \"0\"],\n            [\"1\", \"1\"],\n            [\"2\", \"2\"]\n          ],\n        }, {\n          'type': 'input_value',\n          'name': 'tx'\n        }, {\n          'type': 'input_value',\n          'name': 'rx'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#c58ce4\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_hoverwheels_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var uart_num = block.getFieldValue('uart_num');\n  var tx = Blockly.Python.valueToCode(block, 'tx', Blockly.Python.ORDER_FUNCTION_CALL);\n  var rx = Blockly.Python.valueToCode(block, 'rx', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = HoverWheels(${uart_num}, ${tx}, ${rx})\\n`\n}\n\nBlockly.Blocks[\"custom_hoverwheels_command\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HOVERWHEELS_COMMAND,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_hoverwheelsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'steer'\n        }, {\n          'type': 'input_value',\n          'name': 'speed'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#c58ce4\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_hoverwheels_command\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var steer = Blockly.Python.valueToCode(block, 'steer', Blockly.Python.ORDER_FUNCTION_CALL);\n  var speed = Blockly.Python.valueToCode(block, 'speed', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.command(${steer}, ${speed})\\n`\n}\n\nBlockly.Blocks[\"custom_hoverwheels_query\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HOVERWHEELS_QUERY,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_hoverwheelsOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#c58ce4\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_hoverwheels_query\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.query()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_hoverwheels_changed_speed\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HOVERWHEELS_CHANGED_SPEED,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_hoverwheelsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'param0'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#c58ce4\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_hoverwheels_changed_speed\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var param0 = Blockly.Python.valueToCode(block, 'param0', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.changed_speed(${param0})`, Blockly.Python.ORDER_NONE]\n}","toolbox":"\n<category name=\"HoverWheels\" colour=\"#c58ce4\" hidden=\"true\" toolboxitemid=\"custom_hoverwheels\">\n<title text=\"HoverWheels\" docsLink=\"https://github.com/cosmoBots/uiflow_hoverboard\"></title>\n<block type=\"custom_hoverwheels_init\">\n  <value name=\"tx\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">32</field>\n    </shadow>\n  </value>\n  <value name=\"rx\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">33</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_hoverwheels_command\">\n  <value name=\"steer\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"speed\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_hoverwheels_query\"/><block type=\"custom_hoverwheels_changed_speed\">\n  <value name=\"param0\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block>\n</category>\n","toolboxitemid":"custom_hoverwheels","block_type":["custom_hoverwheels___init__","custom_hoverwheels_command","custom_hoverwheels_query","custom_hoverwheels_changed_speed"]},"data":{"name":"HoverWheels","note":{"en":""},"details":{"color":"#c58ce4","link":"https://github.com/cosmoBots/uiflow_hoverboard","image":"","category":"Custom"},"header":{"file":"HoverWheels","time":"2025-03-12","author":"Txinto Vaz","email":"txinto@elporis.com","license":"MIT License"},"assignments":[],"example":"","source_internal":"","source_external":"","members":[{"name":"__init__","note":{},"label":{"en":"%1 init uart_num %2 tx %3 rx %4"},"params":[{"name":"uart_num","type":null,"default":null,"note":{},"field":"dropdown","options":{"0":"0","1":"1","2":"2"}},{"name":"tx","type":"int","default":"32","note":{},"field":"number","max":"100","min":"0"},{"name":"rx","type":"int","default":"33","note":{},"field":"number","max":"100","min":"0"}],"return":"","source":"        self = UART(uart_num, baudrate=115200, bits=8, parity=None, stop=1, tx=tx, rx=rx, txbuf=256, rxbuf=256, timeout=0, timeout_char=0, invert=0, flow=0)","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"command","note":{},"label":{"en":"command %1 steer %2 speed %3"},"params":[{"name":"steer","type":"int","default":"0","note":{},"field":"number","max":"100","min":"0"},{"name":"speed","type":"int","default":"0","note":{},"field":"number","max":"100","min":"0"}],"return":"","source":"        start = 43981\n        msg = bytearray(8)\n        msg[0] = start & 255\n        msg[1] = start >> 8\n        msg[2] = steer & 255\n        msg[3] = steer >> 8\n        msg[4] = speed & 255\n        msg[5] = speed >> 8\n        checksum = (start ^ steer) ^ speed\n        msg[6] = checksum & 255\n        msg[7] = checksum >> 8\n        self.write(bytes(msg))","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"query","note":{},"label":{"en":"query %1"},"params":[],"return":"","source":"        # Constantes\n        hr_cte_start = 43981\n        hr_st_inicio = 0\n        hr_st_inicio_2 = 1\n        hr_st_cmd1_1 = 2\n        hr_st_cmd1_2 = 3\n        hr_st_cmd2_1 = 4\n        hr_st_cmd2_2 = 5\n        hr_st_spd_r_1 = 6\n        hr_st_spd_r_2 = 7\n        hr_st_spd_l_1 = 8\n        hr_st_spd_l_2 = 9\n        hr_st_bat_1 = 10\n        hr_st_bat_2 = 11\n        hr_st_temp_1 = 12\n        hr_st_temp_2 = 13\n        hr_st_cmdled_1 = 14\n        hr_st_cmdled_2 = 15\n        hr_st_checksum_1 = 16\n        hr_st_checksum_2 = 17\n\n        # Estados y flags\n        hr_msg_recibido = False\n        hr_estado_recepcion = hr_st_inicio\n\n        # Buffers y variables de decodificacion\n        hr_byte_entrante = None\n        hr_byte_anterior = None\n        hr_msg_rcv = bytearray(32)\n\n        # Valores intermedios de la recepcion\n        hr_tmp_start = None\n        hr_tmp_cmd1 = None\n        hr_tmp_cmd2 = None\n        hr_tmp_spd_r = None\n        hr_tmp_spd_l = None\n        hr_tmp_bat = None\n        hr_tmp_temp = None\n        hr_tmp_cmdled = None\n        hr_tmp_checksum = None\n\n        # Argumentos destino de la recepcion\n        cmd1_flag = False\n        cmd2_flag = False\n        spd_r_flag = False\n        spd_l_flag = False\n        bat_flag = False\n        temp_flag = False\n        cmdled_flag = False\n\n        while self.any():\n            hr_msg_rcv = self.read(1)\n            hr_byte_entrante = hr_msg_rcv[0]\n            if hr_estado_recepcion==hr_st_inicio:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_inicio_2\n\n            elif hr_estado_recepcion==hr_st_inicio_2:\n                start_entrante = (hr_byte_entrante << 8) | hr_byte_anterior\n                if start_entrante == hr_cte_start:\n                    hr_estado_recepcion = hr_st_cmd1_1\n\n                else:\n                    hr_estado_recepcion = hr_st_inicio\n\n            elif hr_estado_recepcion==hr_st_cmd1_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_cmd1_2\n\n            elif hr_estado_recepcion==hr_st_cmd1_2:\n                hr_tmp_cmd1 = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_cmd2_1\n\n            elif hr_estado_recepcion==hr_st_cmd2_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_cmd2_2\n\n            elif hr_estado_recepcion==hr_st_cmd2_2:\n                hr_tmp_cmd2 = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_spd_r_1\n\n            elif hr_estado_recepcion==hr_st_spd_r_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_spd_r_2\n\n            elif hr_estado_recepcion==hr_st_spd_r_2:\n                hr_tmp_spd_r = (hr_byte_entrante << 8) | hr_byte_anterior\n                if hr_tmp_spd_r > 32000:\n                    hr_tmp_spd_r = hr_tmp_spd_r - 65536\n\n                hr_estado_recepcion = hr_st_spd_l_1\n\n            elif hr_estado_recepcion==hr_st_spd_l_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_spd_l_2\n\n            elif hr_estado_recepcion==hr_st_spd_l_2:\n                hr_tmp_spd_l = (hr_byte_entrante << 8) | hr_byte_anterior\n                if hr_tmp_spd_l > 32000:\n                    hr_tmp_spd_l = hr_tmp_spd_l - 65536\n\n                hr_estado_recepcion = hr_st_bat_1\n\n            elif hr_estado_recepcion==hr_st_bat_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_bat_2\n\n            elif hr_estado_recepcion==hr_st_bat_2:\n                hr_tmp_bat = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_temp_1\n\n            elif hr_estado_recepcion==hr_st_temp_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_temp_2\n\n            elif hr_estado_recepcion==hr_st_temp_2:\n                hr_tmp_temp = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_cmdled_1\n\n            elif hr_estado_recepcion==hr_st_cmdled_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_cmdled_2\n\n            elif hr_estado_recepcion==hr_st_cmdled_2:\n                hr_tmp_cmdled = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_checksum_1\n\n            elif hr_estado_recepcion==hr_st_checksum_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_checksum_2\n\n            elif hr_estado_recepcion==hr_st_checksum_2:\n                hr_tmp_checksum = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_inicio\n                hr_msg_recibido = True\n                break\n\n            else:\n                pass\n\n        if hr_msg_recibido:\n            if cmd1_rcv != hr_tmp_cmd1:\n                cmd1_rcv = hr_tmp_cmd1\n                cmd1_flag = True\n\n            if cmd2_rcv != hr_tmp_cmd2:\n                cmd2_rcv = hr_tmp_cmd2\n                cmd2_flag = True\n\n            if spd_r_rcv != hr_tmp_spd_r:\n                spd_r_rcv = hr_tmp_spd_r\n                spd_r_flag = True\n\n            if spd_l_rcv != hr_tmp_spd_l:\n                spd_l_rcv = hr_tmp_spd_l\n                spd_l_flag = True\n\n            if bat_rcv != hr_tmp_bat:\n                bat_rcv = hr_tmp_bat\n                bat_flag = True\n\n            if temp_rcv != hr_tmp_temp:\n                temp_rcv = hr_tmp_temp\n                temp_flag = True\n\n            if cmdled_rcv != hr_tmp_cmdled:\n                cmdled_rcv = hr_tmp_cmdled\n                cmdled_flag = True\n\n        return [cmd1_rcv, cmd2_rcv, spd_r_rcv, spd_l_rcv, bat_rcv, temp_rcv, cmdled_rcv,\n        cmd1_flag, cmd2_flag, spd_r_flag, spd_l_flag, bat_flag, temp_flag, cmdled_flag]","ast_return":{"code":"[cmd1_rcv, cmd2_rcv, spd_r_rcv, spd_l_rcv, bat_rcv, temp_rcv, cmdled_rcv, cmd1_flag, cmd2_flag, spd_r_flag, spd_l_flag, bat_flag, temp_flag, cmdled_flag]","id":null},"doc_return":null},{"name":"changed_speed","note":{},"label":{"en":"method %1 param0 %2"},"params":[{"name":"param0","type":"str","default":"","field":""}],"ast_return":{"code":null,"id":"None"},"doc_return":null,"source":"        pass","return_type":null}],"python_file_name":"hoverwheels"},"pyCode":"\n\"\"\"\nfile     HoverWheels\ntime     2025-03-12\nauthor   Txinto Vaz\nemail   txinto@elporis.com\nlicense  MIT License\n\"\"\"\n\n\n\nclass HoverWheels:\n    \"\"\"\n    note:\n        en: ''\n    details:\n        color: '#c58ce4'\n        link: https://github.com/cosmoBots/uiflow_hoverboard\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, uart_num, tx: int = 32, rx: int = 33):\n        \"\"\"\n        label:\n            en: '%1 init uart_num %2 tx %3 rx %4'\n        params:\n            uart_num:\n                name: uart_num\n                field: dropdown\n                options:\n                    '0': '0'\n                    '1': '1'\n                    '2': '2'\n            tx:\n                name: tx\n                type: int\n                default: '32'\n                field: number\n                max: '100'\n                min: '0'\n            rx:\n                name: rx\n                type: int\n                default: '33'\n                field: number\n                max: '100'\n                min: '0'\n        \"\"\"\n        self = UART(uart_num, baudrate=115200, bits=8, parity=None, stop=1, tx=tx, rx=rx, txbuf=256, rxbuf=256, timeout=0, timeout_char=0, invert=0, flow=0)\n\n    def command(self, steer: int = 0, speed: int = 0):\n        \"\"\"\n        label:\n            en: command %1 steer %2 speed %3\n        params:\n            steer:\n                name: steer\n                type: int\n                default: '0'\n                field: number\n                max: '100'\n                min: '0'\n            speed:\n                name: speed\n                type: int\n                default: '0'\n                field: number\n                max: '100'\n                min: '0'\n        \"\"\"\n        start = 43981\n        msg = bytearray(8)\n        msg[0] = start & 255\n        msg[1] = start >> 8\n        msg[2] = steer & 255\n        msg[3] = steer >> 8\n        msg[4] = speed & 255\n        msg[5] = speed >> 8\n        checksum = (start ^ steer) ^ speed\n        msg[6] = checksum & 255\n        msg[7] = checksum >> 8\n        self.write(bytes(msg))\n\n    def query(self):\n        \"\"\"\n        label:\n            en: query %1\n        \"\"\"\n        # Constantes\n        hr_cte_start = 43981\n        hr_st_inicio = 0\n        hr_st_inicio_2 = 1\n        hr_st_cmd1_1 = 2\n        hr_st_cmd1_2 = 3\n        hr_st_cmd2_1 = 4\n        hr_st_cmd2_2 = 5\n        hr_st_spd_r_1 = 6\n        hr_st_spd_r_2 = 7\n        hr_st_spd_l_1 = 8\n        hr_st_spd_l_2 = 9\n        hr_st_bat_1 = 10\n        hr_st_bat_2 = 11\n        hr_st_temp_1 = 12\n        hr_st_temp_2 = 13\n        hr_st_cmdled_1 = 14\n        hr_st_cmdled_2 = 15\n        hr_st_checksum_1 = 16\n        hr_st_checksum_2 = 17\n\n        # Estados y flags\n        hr_msg_recibido = False\n        hr_estado_recepcion = hr_st_inicio\n\n        # Buffers y variables de decodificacion\n        hr_byte_entrante = None\n        hr_byte_anterior = None\n        hr_msg_rcv = bytearray(32)\n\n        # Valores intermedios de la recepcion\n        hr_tmp_start = None\n        hr_tmp_cmd1 = None\n        hr_tmp_cmd2 = None\n        hr_tmp_spd_r = None\n        hr_tmp_spd_l = None\n        hr_tmp_bat = None\n        hr_tmp_temp = None\n        hr_tmp_cmdled = None\n        hr_tmp_checksum = None\n\n        # Argumentos destino de la recepcion\n        cmd1_flag = False\n        cmd2_flag = False\n        spd_r_flag = False\n        spd_l_flag = False\n        bat_flag = False\n        temp_flag = False\n        cmdled_flag = False\n\n        while self.any():\n            hr_msg_rcv = self.read(1)\n            hr_byte_entrante = hr_msg_rcv[0]\n            if hr_estado_recepcion==hr_st_inicio:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_inicio_2\n\n            elif hr_estado_recepcion==hr_st_inicio_2:\n                start_entrante = (hr_byte_entrante << 8) | hr_byte_anterior\n                if start_entrante == hr_cte_start:\n                    hr_estado_recepcion = hr_st_cmd1_1\n\n                else:\n                    hr_estado_recepcion = hr_st_inicio\n\n            elif hr_estado_recepcion==hr_st_cmd1_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_cmd1_2\n\n            elif hr_estado_recepcion==hr_st_cmd1_2:\n                hr_tmp_cmd1 = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_cmd2_1\n\n            elif hr_estado_recepcion==hr_st_cmd2_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_cmd2_2\n\n            elif hr_estado_recepcion==hr_st_cmd2_2:\n                hr_tmp_cmd2 = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_spd_r_1\n\n            elif hr_estado_recepcion==hr_st_spd_r_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_spd_r_2\n\n            elif hr_estado_recepcion==hr_st_spd_r_2:\n                hr_tmp_spd_r = (hr_byte_entrante << 8) | hr_byte_anterior\n                if hr_tmp_spd_r > 32000:\n                    hr_tmp_spd_r = hr_tmp_spd_r - 65536\n\n                hr_estado_recepcion = hr_st_spd_l_1\n\n            elif hr_estado_recepcion==hr_st_spd_l_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_spd_l_2\n\n            elif hr_estado_recepcion==hr_st_spd_l_2:\n                hr_tmp_spd_l = (hr_byte_entrante << 8) | hr_byte_anterior\n                if hr_tmp_spd_l > 32000:\n                    hr_tmp_spd_l = hr_tmp_spd_l - 65536\n\n                hr_estado_recepcion = hr_st_bat_1\n\n            elif hr_estado_recepcion==hr_st_bat_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_bat_2\n\n            elif hr_estado_recepcion==hr_st_bat_2:\n                hr_tmp_bat = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_temp_1\n\n            elif hr_estado_recepcion==hr_st_temp_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_temp_2\n\n            elif hr_estado_recepcion==hr_st_temp_2:\n                hr_tmp_temp = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_cmdled_1\n\n            elif hr_estado_recepcion==hr_st_cmdled_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_cmdled_2\n\n            elif hr_estado_recepcion==hr_st_cmdled_2:\n                hr_tmp_cmdled = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_checksum_1\n\n            elif hr_estado_recepcion==hr_st_checksum_1:\n                hr_byte_anterior = hr_byte_entrante\n                hr_estado_recepcion = hr_st_checksum_2\n\n            elif hr_estado_recepcion==hr_st_checksum_2:\n                hr_tmp_checksum = (hr_byte_entrante << 8) | hr_byte_anterior\n                hr_estado_recepcion = hr_st_inicio\n                hr_msg_recibido = True\n                break\n\n            else:\n                pass\n\n        if hr_msg_recibido:\n            if cmd1_rcv != hr_tmp_cmd1:\n                cmd1_rcv = hr_tmp_cmd1\n                cmd1_flag = True\n\n            if cmd2_rcv != hr_tmp_cmd2:\n                cmd2_rcv = hr_tmp_cmd2\n                cmd2_flag = True\n\n            if spd_r_rcv != hr_tmp_spd_r:\n                spd_r_rcv = hr_tmp_spd_r\n                spd_r_flag = True\n\n            if spd_l_rcv != hr_tmp_spd_l:\n                spd_l_rcv = hr_tmp_spd_l\n                spd_l_flag = True\n\n            if bat_rcv != hr_tmp_bat:\n                bat_rcv = hr_tmp_bat\n                bat_flag = True\n\n            if temp_rcv != hr_tmp_temp:\n                temp_rcv = hr_tmp_temp\n                temp_flag = True\n\n            if cmdled_rcv != hr_tmp_cmdled:\n                cmdled_rcv = hr_tmp_cmdled\n                cmdled_flag = True\n\n        return [cmd1_rcv, cmd2_rcv, spd_r_rcv, spd_l_rcv, bat_rcv, temp_rcv, cmdled_rcv,\n        cmd1_flag, cmd2_flag, spd_r_flag, spd_l_flag, bat_flag, temp_flag, cmdled_flag]\n\n    def changed_speed(self, param0: str) -> None:\n        \"\"\"\n        label:\n            en: method %1 param0 %2\n        params:\n            param0:\n                name: param0\n                type: str\n        \"\"\"\n        pass\n\n\n","version":"alpha2"}