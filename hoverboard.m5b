{"category":"hoverboard","color":"#9c2fb1","blocks":["__hoverboard_hover_inicia","__hoverboard_hover_comando","__hoverboard_hover_recibe"],"jscode":"// Block __hoverboard_hover_inicia\nvar __hoverboard_hover_inicia_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"hover_inicia\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"hover_uart\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"hover_uart\"\n        }\n    ],\n    \"colour\": \"#9c2fb1\"\n};\n\nwindow['Blockly'].Blocks['__hoverboard_hover_inicia'] = {\n    init: function() {\n        this.jsonInit(__hoverboard_hover_inicia_json);\n    }\n};\n\nwindow['Blockly'].Python['__hoverboard_hover_inicia'] = function(block) {\n    var hover_uart = Blockly.Python.valueToCode(block, 'hover_uart', Blockly.Python.ORDER_NONE);\n    return `${hover_uart} = machine.UART(1, tx=32, rx=33)\n${hover_uart}.init(115200, bits=8, parity=None, stop=1)` + \"\\n\";\n};\n\n// Block __hoverboard_hover_comando\nvar __hoverboard_hover_comando_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"hover_comando\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"uart_num\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"uart_num\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"giro\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"giro\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"velocidad\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"velocidad\"\n        }\n    ],\n    \"colour\": \"#9c2fb1\"\n};\n\nwindow['Blockly'].Blocks['__hoverboard_hover_comando'] = {\n    init: function() {\n        this.jsonInit(__hoverboard_hover_comando_json);\n    }\n};\n\nwindow['Blockly'].Python['__hoverboard_hover_comando'] = function(block) {\n    var uart_num = Blockly.Python.valueToCode(block, 'uart_num', Blockly.Python.ORDER_NONE);\nvar giro = Blockly.Python.valueToCode(block, 'giro', Blockly.Python.ORDER_NONE);\nvar velocidad = Blockly.Python.valueToCode(block, 'velocidad', Blockly.Python.ORDER_NONE);\n    return `start = 43981\nmsg = bytearray(8)\nmsg[0] = start & 255\nmsg[1] = start >> 8\nmsg[2] = ${giro} & 255\nmsg[3] = ${giro} >> 8\nmsg[4] = ${velocidad} & 255\nmsg[5] = ${velocidad} >> 8\nchecksum = (start ^ ${giro}) ^ ${velocidad}\nmsg[6] = checksum & 255\nmsg[7] = checksum >> 8\n${uart_num}.write(bytes(msg))\n` + \"\\n\";\n};\n\n// Block __hoverboard_hover_recibe\nvar __hoverboard_hover_recibe_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"hover_recibe\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"hover_uart\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"hover_uart\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"cmd1_rcv\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"cmd1_rcv\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"cmd2_rcv\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"cmd2_rcv\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"spd_r_rcv\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"spd_r_rcv\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"spd_l_rcv\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"spd_l_rcv\"\n        }\n    ],\n    \"message6\": \"%1 %2\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"bat_rcv\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"bat_rcv\"\n        }\n    ],\n    \"message7\": \"%1 %2\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"temp_rcv\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"temp_rcv\"\n        }\n    ],\n    \"message8\": \"%1 %2\",\n    \"args8\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"cmdled_rcv\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"cmdled_rcv\"\n        }\n    ],\n    \"message9\": \"%1 %2\",\n    \"args9\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"cmd1_flag\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"cmd1_flag\"\n        }\n    ],\n    \"message10\": \"%1 %2\",\n    \"args10\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"cmd2_flag\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"cmd2_flag\"\n        }\n    ],\n    \"message11\": \"%1 %2\",\n    \"args11\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"spd_r_flag\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"spd_r_flag\"\n        }\n    ],\n    \"message12\": \"%1 %2\",\n    \"args12\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"spd_l_flag\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"spd_l_flag\"\n        }\n    ],\n    \"message13\": \"%1 %2\",\n    \"args13\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"bat_flag\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"bat_flag\"\n        }\n    ],\n    \"message14\": \"%1 %2\",\n    \"args14\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"temp_flag\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"temp_flag\"\n        }\n    ],\n    \"message15\": \"%1 %2\",\n    \"args15\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"cmdled_flag\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"cmdled_flag\"\n        }\n    ],\n    \"colour\": \"#9c2fb1\"\n};\n\nwindow['Blockly'].Blocks['__hoverboard_hover_recibe'] = {\n    init: function() {\n        this.jsonInit(__hoverboard_hover_recibe_json);\n    }\n};\n\nwindow['Blockly'].Python['__hoverboard_hover_recibe'] = function(block) {\n    var hover_uart = Blockly.Python.valueToCode(block, 'hover_uart', Blockly.Python.ORDER_NONE);\nvar cmd1_rcv = Blockly.Python.valueToCode(block, 'cmd1_rcv', Blockly.Python.ORDER_NONE);\nvar cmd2_rcv = Blockly.Python.valueToCode(block, 'cmd2_rcv', Blockly.Python.ORDER_NONE);\nvar spd_r_rcv = Blockly.Python.valueToCode(block, 'spd_r_rcv', Blockly.Python.ORDER_NONE);\nvar spd_l_rcv = Blockly.Python.valueToCode(block, 'spd_l_rcv', Blockly.Python.ORDER_NONE);\nvar bat_rcv = Blockly.Python.valueToCode(block, 'bat_rcv', Blockly.Python.ORDER_NONE);\nvar temp_rcv = Blockly.Python.valueToCode(block, 'temp_rcv', Blockly.Python.ORDER_NONE);\nvar cmdled_rcv = Blockly.Python.valueToCode(block, 'cmdled_rcv', Blockly.Python.ORDER_NONE);\nvar cmd1_flag = Blockly.Python.valueToCode(block, 'cmd1_flag', Blockly.Python.ORDER_NONE);\nvar cmd2_flag = Blockly.Python.valueToCode(block, 'cmd2_flag', Blockly.Python.ORDER_NONE);\nvar spd_r_flag = Blockly.Python.valueToCode(block, 'spd_r_flag', Blockly.Python.ORDER_NONE);\nvar spd_l_flag = Blockly.Python.valueToCode(block, 'spd_l_flag', Blockly.Python.ORDER_NONE);\nvar bat_flag = Blockly.Python.valueToCode(block, 'bat_flag', Blockly.Python.ORDER_NONE);\nvar temp_flag = Blockly.Python.valueToCode(block, 'temp_flag', Blockly.Python.ORDER_NONE);\nvar cmdled_flag = Blockly.Python.valueToCode(block, 'cmdled_flag', Blockly.Python.ORDER_NONE);\n    return `# Constantes\nhr_cte_start = 43981\nhr_st_inicio = 0\nhr_st_inicio_2 = 1\nhr_st_cmd1_1 = 2\nhr_st_cmd1_2 = 3\nhr_st_cmd2_1 = 4\nhr_st_cmd2_2 = 5\nhr_st_spd_r_1 = 6\nhr_st_spd_r_2 = 7\nhr_st_spd_l_1 = 8\nhr_st_spd_l_2 = 9\nhr_st_bat_1 = 10\nhr_st_bat_2 = 11\nhr_st_temp_1 = 12\nhr_st_temp_2 = 13\nhr_st_cmdled_1 = 14\nhr_st_cmdled_2 = 15\nhr_st_checksum_1 = 16\nhr_st_checksum_2 = 17\n\n# Estados y flags\nhr_msg_recibido = False\nhr_estado_recepcion = hr_st_inicio\n\n# Buffers y variables de decodificacion\nhr_byte_entrante = None\nhr_byte_anterior = None\nhr_msg_rcv = bytearray(32)\n\n# Valores intermedios de la recepcion\nhr_tmp_start = None\nhr_tmp_cmd1 = None\nhr_tmp_cmd2 = None\nhr_tmp_spd_r = None\nhr_tmp_spd_l = None\nhr_tmp_bat = None\nhr_tmp_temp = None\nhr_tmp_cmdled = None\nhr_tmp_checksum = None\n\n# Argumentos destino de la recepcion\n${cmd1_flag} = False\n${cmd2_flag} = False\n${spd_r_flag} = False\n${spd_l_flag} = False\n${bat_flag} = False\n${temp_flag} = False\n${cmdled_flag} = False\n\nwhile ${hover_uart}.any():\n    hr_msg_rcv = ${hover_uart}.read(1)\n    hr_byte_entrante = hr_msg_rcv[0]\n    if hr_estado_recepcion==hr_st_inicio:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_inicio_2\n\n    elif hr_estado_recepcion==hr_st_inicio_2:\n        start_entrante = (hr_byte_entrante << 8) | hr_byte_anterior\n        if start_entrante == hr_cte_start:\n            hr_estado_recepcion = hr_st_cmd1_1\n\n        else:\n            hr_estado_recepcion = hr_st_inicio\n\n    elif hr_estado_recepcion==hr_st_cmd1_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmd1_2\n\n    elif hr_estado_recepcion==hr_st_cmd1_2:\n        hr_tmp_cmd1 = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_cmd2_1\n\n    elif hr_estado_recepcion==hr_st_cmd2_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmd2_2\n\n    elif hr_estado_recepcion==hr_st_cmd2_2:\n        hr_tmp_cmd2 = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_spd_r_1\n\n    elif hr_estado_recepcion==hr_st_spd_r_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_spd_r_2\n\n    elif hr_estado_recepcion==hr_st_spd_r_2:\n        hr_tmp_spd_r = (hr_byte_entrante << 8) | hr_byte_anterior\n        if hr_tmp_spd_r > 32000:\n            hr_tmp_spd_r = hr_tmp_spd_r - 65536\n\n        hr_estado_recepcion = hr_st_spd_l_1\n\n    elif hr_estado_recepcion==hr_st_spd_l_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_spd_l_2\n\n    elif hr_estado_recepcion==hr_st_spd_l_2:\n        hr_tmp_spd_l = (hr_byte_entrante << 8) | hr_byte_anterior\n        if hr_tmp_spd_l > 32000:\n            hr_tmp_spd_l = hr_tmp_spd_l - 65536\n\n        hr_estado_recepcion = hr_st_bat_1\n\n    elif hr_estado_recepcion==hr_st_bat_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_bat_2\n\n    elif hr_estado_recepcion==hr_st_bat_2:\n        hr_tmp_bat = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_temp_1\n\n    elif hr_estado_recepcion==hr_st_temp_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_temp_2\n\n    elif hr_estado_recepcion==hr_st_temp_2:\n        hr_tmp_temp = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_cmdled_1\n\n    elif hr_estado_recepcion==hr_st_cmdled_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmdled_2\n\n    elif hr_estado_recepcion==hr_st_cmdled_2:\n        hr_tmp_cmdled = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_checksum_1\n\n    elif hr_estado_recepcion==hr_st_checksum_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_checksum_2\n\n    elif hr_estado_recepcion==hr_st_checksum_2:\n        hr_tmp_checksum = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_inicio\n        hr_msg_recibido = True\n        break\n\n    else:\n        pass\n\nif hr_msg_recibido:\n    if ${cmd1_rcv} != hr_tmp_cmd1:\n        ${cmd1_rcv} = hr_tmp_cmd1\n        ${cmd1_flag} = True\n\n    if ${cmd2_rcv} != hr_tmp_cmd2:\n        ${cmd2_rcv} = hr_tmp_cmd2\n        ${cmd2_flag} = True\n\n    if ${spd_r_rcv} != hr_tmp_spd_r:\n        ${spd_r_rcv} = hr_tmp_spd_r\n        ${spd_r_flag} = True\n\n    if ${spd_l_rcv} != hr_tmp_spd_l:\n        ${spd_l_rcv} = hr_tmp_spd_l\n        ${spd_l_flag} = True\n\n    if ${bat_rcv} != hr_tmp_bat:\n        ${bat_rcv} = hr_tmp_bat\n        ${bat_flag} = True\n\n    if ${temp_rcv} != hr_tmp_temp:\n        ${temp_rcv} = hr_tmp_temp\n        ${temp_flag} = True\n\n    if ${cmdled_rcv} != hr_tmp_cmdled:\n        ${cmdled_rcv} = hr_tmp_cmdled\n        ${cmdled_flag} = True\n\n` + \"\\n\";\n};\n\n","code":{"hover_inicia":["window['Blockly'].Python['__hoverboard_hover_inicia'] = function(block) {\n    var hover_uart = Blockly.Python.valueToCode(block, 'hover_uart', Blockly.Python.ORDER_NONE);\n    return `${hover_uart} = machine.UART(1, tx=32, rx=33)\n${hover_uart}.init(115200, bits=8, parity=None, stop=1)` + \"\\n\";\n};\n\n","${hover_uart} = machine.UART(1, tx=32, rx=33)\n${hover_uart}.init(115200, bits=8, parity=None, stop=1)"],"hover_comando":["window['Blockly'].Python['__hoverboard_hover_comando'] = function(block) {\n    var uart_num = Blockly.Python.valueToCode(block, 'uart_num', Blockly.Python.ORDER_NONE);\nvar giro = Blockly.Python.valueToCode(block, 'giro', Blockly.Python.ORDER_NONE);\nvar velocidad = Blockly.Python.valueToCode(block, 'velocidad', Blockly.Python.ORDER_NONE);\n    return `start = 43981\nmsg = bytearray(8)\nmsg[0] = start & 255\nmsg[1] = start >> 8\nmsg[2] = ${giro} & 255\nmsg[3] = ${giro} >> 8\nmsg[4] = ${velocidad} & 255\nmsg[5] = ${velocidad} >> 8\nchecksum = (start ^ ${giro}) ^ ${velocidad}\nmsg[6] = checksum & 255\nmsg[7] = checksum >> 8\n${uart_num}.write(bytes(msg))\n` + \"\\n\";\n};\n\n","start = 43981\nmsg = bytearray(8)\nmsg[0] = start & 255\nmsg[1] = start >> 8\nmsg[2] = ${giro} & 255\nmsg[3] = ${giro} >> 8\nmsg[4] = ${velocidad} & 255\nmsg[5] = ${velocidad} >> 8\nchecksum = (start ^ ${giro}) ^ ${velocidad}\nmsg[6] = checksum & 255\nmsg[7] = checksum >> 8\n${uart_num}.write(bytes(msg))\n"],"hover_recibe":["window['Blockly'].Python['__hoverboard_hover_recibe'] = function(block) {\n    var hover_uart = Blockly.Python.valueToCode(block, 'hover_uart', Blockly.Python.ORDER_NONE);\nvar cmd1_rcv = Blockly.Python.valueToCode(block, 'cmd1_rcv', Blockly.Python.ORDER_NONE);\nvar cmd2_rcv = Blockly.Python.valueToCode(block, 'cmd2_rcv', Blockly.Python.ORDER_NONE);\nvar spd_r_rcv = Blockly.Python.valueToCode(block, 'spd_r_rcv', Blockly.Python.ORDER_NONE);\nvar spd_l_rcv = Blockly.Python.valueToCode(block, 'spd_l_rcv', Blockly.Python.ORDER_NONE);\nvar bat_rcv = Blockly.Python.valueToCode(block, 'bat_rcv', Blockly.Python.ORDER_NONE);\nvar temp_rcv = Blockly.Python.valueToCode(block, 'temp_rcv', Blockly.Python.ORDER_NONE);\nvar cmdled_rcv = Blockly.Python.valueToCode(block, 'cmdled_rcv', Blockly.Python.ORDER_NONE);\nvar cmd1_flag = Blockly.Python.valueToCode(block, 'cmd1_flag', Blockly.Python.ORDER_NONE);\nvar cmd2_flag = Blockly.Python.valueToCode(block, 'cmd2_flag', Blockly.Python.ORDER_NONE);\nvar spd_r_flag = Blockly.Python.valueToCode(block, 'spd_r_flag', Blockly.Python.ORDER_NONE);\nvar spd_l_flag = Blockly.Python.valueToCode(block, 'spd_l_flag', Blockly.Python.ORDER_NONE);\nvar bat_flag = Blockly.Python.valueToCode(block, 'bat_flag', Blockly.Python.ORDER_NONE);\nvar temp_flag = Blockly.Python.valueToCode(block, 'temp_flag', Blockly.Python.ORDER_NONE);\nvar cmdled_flag = Blockly.Python.valueToCode(block, 'cmdled_flag', Blockly.Python.ORDER_NONE);\n    return `# Constantes\nhr_cte_start = 43981\nhr_st_inicio = 0\nhr_st_inicio_2 = 1\nhr_st_cmd1_1 = 2\nhr_st_cmd1_2 = 3\nhr_st_cmd2_1 = 4\nhr_st_cmd2_2 = 5\nhr_st_spd_r_1 = 6\nhr_st_spd_r_2 = 7\nhr_st_spd_l_1 = 8\nhr_st_spd_l_2 = 9\nhr_st_bat_1 = 10\nhr_st_bat_2 = 11\nhr_st_temp_1 = 12\nhr_st_temp_2 = 13\nhr_st_cmdled_1 = 14\nhr_st_cmdled_2 = 15\nhr_st_checksum_1 = 16\nhr_st_checksum_2 = 17\n\n# Estados y flags\nhr_msg_recibido = False\nhr_estado_recepcion = hr_st_inicio\n\n# Buffers y variables de decodificacion\nhr_byte_entrante = None\nhr_byte_anterior = None\nhr_msg_rcv = bytearray(32)\n\n# Valores intermedios de la recepcion\nhr_tmp_start = None\nhr_tmp_cmd1 = None\nhr_tmp_cmd2 = None\nhr_tmp_spd_r = None\nhr_tmp_spd_l = None\nhr_tmp_bat = None\nhr_tmp_temp = None\nhr_tmp_cmdled = None\nhr_tmp_checksum = None\n\n# Argumentos destino de la recepcion\n${cmd1_flag} = False\n${cmd2_flag} = False\n${spd_r_flag} = False\n${spd_l_flag} = False\n${bat_flag} = False\n${temp_flag} = False\n${cmdled_flag} = False\n\nwhile ${hover_uart}.any():\n    hr_msg_rcv = ${hover_uart}.read(1)\n    hr_byte_entrante = hr_msg_rcv[0]\n    if hr_estado_recepcion==hr_st_inicio:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_inicio_2\n\n    elif hr_estado_recepcion==hr_st_inicio_2:\n        start_entrante = (hr_byte_entrante << 8) | hr_byte_anterior\n        if start_entrante == hr_cte_start:\n            hr_estado_recepcion = hr_st_cmd1_1\n\n        else:\n            hr_estado_recepcion = hr_st_inicio\n\n    elif hr_estado_recepcion==hr_st_cmd1_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmd1_2\n\n    elif hr_estado_recepcion==hr_st_cmd1_2:\n        hr_tmp_cmd1 = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_cmd2_1\n\n    elif hr_estado_recepcion==hr_st_cmd2_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmd2_2\n\n    elif hr_estado_recepcion==hr_st_cmd2_2:\n        hr_tmp_cmd2 = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_spd_r_1\n\n    elif hr_estado_recepcion==hr_st_spd_r_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_spd_r_2\n\n    elif hr_estado_recepcion==hr_st_spd_r_2:\n        hr_tmp_spd_r = (hr_byte_entrante << 8) | hr_byte_anterior\n        if hr_tmp_spd_r > 32000:\n            hr_tmp_spd_r = hr_tmp_spd_r - 65536\n\n        hr_estado_recepcion = hr_st_spd_l_1\n\n    elif hr_estado_recepcion==hr_st_spd_l_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_spd_l_2\n\n    elif hr_estado_recepcion==hr_st_spd_l_2:\n        hr_tmp_spd_l = (hr_byte_entrante << 8) | hr_byte_anterior\n        if hr_tmp_spd_l > 32000:\n            hr_tmp_spd_l = hr_tmp_spd_l - 65536\n\n        hr_estado_recepcion = hr_st_bat_1\n\n    elif hr_estado_recepcion==hr_st_bat_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_bat_2\n\n    elif hr_estado_recepcion==hr_st_bat_2:\n        hr_tmp_bat = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_temp_1\n\n    elif hr_estado_recepcion==hr_st_temp_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_temp_2\n\n    elif hr_estado_recepcion==hr_st_temp_2:\n        hr_tmp_temp = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_cmdled_1\n\n    elif hr_estado_recepcion==hr_st_cmdled_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmdled_2\n\n    elif hr_estado_recepcion==hr_st_cmdled_2:\n        hr_tmp_cmdled = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_checksum_1\n\n    elif hr_estado_recepcion==hr_st_checksum_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_checksum_2\n\n    elif hr_estado_recepcion==hr_st_checksum_2:\n        hr_tmp_checksum = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_inicio\n        hr_msg_recibido = True\n        break\n\n    else:\n        pass\n\nif hr_msg_recibido:\n    if ${cmd1_rcv} != hr_tmp_cmd1:\n        ${cmd1_rcv} = hr_tmp_cmd1\n        ${cmd1_flag} = True\n\n    if ${cmd2_rcv} != hr_tmp_cmd2:\n        ${cmd2_rcv} = hr_tmp_cmd2\n        ${cmd2_flag} = True\n\n    if ${spd_r_rcv} != hr_tmp_spd_r:\n        ${spd_r_rcv} = hr_tmp_spd_r\n        ${spd_r_flag} = True\n\n    if ${spd_l_rcv} != hr_tmp_spd_l:\n        ${spd_l_rcv} = hr_tmp_spd_l\n        ${spd_l_flag} = True\n\n    if ${bat_rcv} != hr_tmp_bat:\n        ${bat_rcv} = hr_tmp_bat\n        ${bat_flag} = True\n\n    if ${temp_rcv} != hr_tmp_temp:\n        ${temp_rcv} = hr_tmp_temp\n        ${temp_flag} = True\n\n    if ${cmdled_rcv} != hr_tmp_cmdled:\n        ${cmdled_rcv} = hr_tmp_cmdled\n        ${cmdled_flag} = True\n\n` + \"\\n\";\n};\n\n","# Constantes\nhr_cte_start = 43981\nhr_st_inicio = 0\nhr_st_inicio_2 = 1\nhr_st_cmd1_1 = 2\nhr_st_cmd1_2 = 3\nhr_st_cmd2_1 = 4\nhr_st_cmd2_2 = 5\nhr_st_spd_r_1 = 6\nhr_st_spd_r_2 = 7\nhr_st_spd_l_1 = 8\nhr_st_spd_l_2 = 9\nhr_st_bat_1 = 10\nhr_st_bat_2 = 11\nhr_st_temp_1 = 12\nhr_st_temp_2 = 13\nhr_st_cmdled_1 = 14\nhr_st_cmdled_2 = 15\nhr_st_checksum_1 = 16\nhr_st_checksum_2 = 17\n\n# Estados y flags\nhr_msg_recibido = False\nhr_estado_recepcion = hr_st_inicio\n\n# Buffers y variables de decodificacion\nhr_byte_entrante = None\nhr_byte_anterior = None\nhr_msg_rcv = bytearray(32)\n\n# Valores intermedios de la recepcion\nhr_tmp_start = None\nhr_tmp_cmd1 = None\nhr_tmp_cmd2 = None\nhr_tmp_spd_r = None\nhr_tmp_spd_l = None\nhr_tmp_bat = None\nhr_tmp_temp = None\nhr_tmp_cmdled = None\nhr_tmp_checksum = None\n\n# Argumentos destino de la recepcion\n${cmd1_flag} = False\n${cmd2_flag} = False\n${spd_r_flag} = False\n${spd_l_flag} = False\n${bat_flag} = False\n${temp_flag} = False\n${cmdled_flag} = False\n\nwhile ${hover_uart}.any():\n    hr_msg_rcv = ${hover_uart}.read(1)\n    hr_byte_entrante = hr_msg_rcv[0]\n    if hr_estado_recepcion==hr_st_inicio:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_inicio_2\n\n    elif hr_estado_recepcion==hr_st_inicio_2:\n        start_entrante = (hr_byte_entrante << 8) | hr_byte_anterior\n        if start_entrante == hr_cte_start:\n            hr_estado_recepcion = hr_st_cmd1_1\n\n        else:\n            hr_estado_recepcion = hr_st_inicio\n\n    elif hr_estado_recepcion==hr_st_cmd1_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmd1_2\n\n    elif hr_estado_recepcion==hr_st_cmd1_2:\n        hr_tmp_cmd1 = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_cmd2_1\n\n    elif hr_estado_recepcion==hr_st_cmd2_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmd2_2\n\n    elif hr_estado_recepcion==hr_st_cmd2_2:\n        hr_tmp_cmd2 = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_spd_r_1\n\n    elif hr_estado_recepcion==hr_st_spd_r_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_spd_r_2\n\n    elif hr_estado_recepcion==hr_st_spd_r_2:\n        hr_tmp_spd_r = (hr_byte_entrante << 8) | hr_byte_anterior\n        if hr_tmp_spd_r > 32000:\n            hr_tmp_spd_r = hr_tmp_spd_r - 65536\n\n        hr_estado_recepcion = hr_st_spd_l_1\n\n    elif hr_estado_recepcion==hr_st_spd_l_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_spd_l_2\n\n    elif hr_estado_recepcion==hr_st_spd_l_2:\n        hr_tmp_spd_l = (hr_byte_entrante << 8) | hr_byte_anterior\n        if hr_tmp_spd_l > 32000:\n            hr_tmp_spd_l = hr_tmp_spd_l - 65536\n\n        hr_estado_recepcion = hr_st_bat_1\n\n    elif hr_estado_recepcion==hr_st_bat_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_bat_2\n\n    elif hr_estado_recepcion==hr_st_bat_2:\n        hr_tmp_bat = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_temp_1\n\n    elif hr_estado_recepcion==hr_st_temp_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_temp_2\n\n    elif hr_estado_recepcion==hr_st_temp_2:\n        hr_tmp_temp = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_cmdled_1\n\n    elif hr_estado_recepcion==hr_st_cmdled_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_cmdled_2\n\n    elif hr_estado_recepcion==hr_st_cmdled_2:\n        hr_tmp_cmdled = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_checksum_1\n\n    elif hr_estado_recepcion==hr_st_checksum_1:\n        hr_byte_anterior = hr_byte_entrante\n        hr_estado_recepcion = hr_st_checksum_2\n\n    elif hr_estado_recepcion==hr_st_checksum_2:\n        hr_tmp_checksum = (hr_byte_entrante << 8) | hr_byte_anterior\n        hr_estado_recepcion = hr_st_inicio\n        hr_msg_recibido = True\n        break\n\n    else:\n        pass\n\nif hr_msg_recibido:\n    if ${cmd1_rcv} != hr_tmp_cmd1:\n        ${cmd1_rcv} = hr_tmp_cmd1\n        ${cmd1_flag} = True\n\n    if ${cmd2_rcv} != hr_tmp_cmd2:\n        ${cmd2_rcv} = hr_tmp_cmd2\n        ${cmd2_flag} = True\n\n    if ${spd_r_rcv} != hr_tmp_spd_r:\n        ${spd_r_rcv} = hr_tmp_spd_r\n        ${spd_r_flag} = True\n\n    if ${spd_l_rcv} != hr_tmp_spd_l:\n        ${spd_l_rcv} = hr_tmp_spd_l\n        ${spd_l_flag} = True\n\n    if ${bat_rcv} != hr_tmp_bat:\n        ${bat_rcv} = hr_tmp_bat\n        ${bat_flag} = True\n\n    if ${temp_rcv} != hr_tmp_temp:\n        ${temp_rcv} = hr_tmp_temp\n        ${temp_flag} = True\n\n    if ${cmdled_rcv} != hr_tmp_cmdled:\n        ${cmdled_rcv} = hr_tmp_cmdled\n        ${cmdled_flag} = True\n\n"]}}